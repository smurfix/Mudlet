#!/bin/bash

set -u -o pipefail

usage() {
	cat <<END >&2
This program creates a Debian chroot environment to run Mudlet in.
It builds Mudlet, starts an X server, starts a test MUD, starts Mudlet,
and then plays with things.

This script requires an installed "debootstrap" program.
You also need a working "sudo". If you want to use a chroot environment,
you also need "systemd-nspawn".

Usage: $0 [options] [-d DIR] [opts] [test …]
-d DIR  Create the chroot environment here
OPTS    options for '$(dirname "$0")/run.py'] [test …]
TEST    Tests to run
END
    if test $# -gt 0 ; then
        echo "$*" >&2
    else
        echo 'Terminating...' >&2
    fi
    exit 1
}

if [ $# -gt 0 ] && [ "$1" == "-d" ] ; then
    D="$2"
    shift;shift
fi

export LC_ALL=C.UTF-8
set -e

if test -v D ; then  # run in chroot
    sudo true >/dev/null
    mkdir -p "$D"
    "$(dirname "$0")"/mkchroot -d "$D" -m http://ftp.de.debian.org/debian -v minbase \
        python3-venv python3-pip \
        tightvncserver xserver-xephyr xdotool xinput xwd x11-apps ratpoison scrot \
        libpcre3-dev zlib1g-dev libboost-dev libhunspell-dev libpugixml-dev qtbase5-dev \
        qt5-qmake qttools5-dev qtmultimedia5-dev libqt5opengl5-dev liblua5.1-0-dev libzip-dev

    DD="/mudlet"
    HERE="$(/bin/pwd)"
    cd "$D"
    D="$(/bin/pwd)"  # now absolute path
    R='sudo systemd-nspawn -d "$D" --bind=/tmp'
    M="$D/mudlet"
    if ! $R true ; then
        echo "Cannot run commands in '$D'. Terminating." >&2
        exit 1
    fi

    if test -d "$M/.git" ; then
        cd "$M"
        git pull
    else
        # This dance ensures that the script works no matter where it's called from
        # even if it uses a heap of relative paths
        cd "$HERE"
        cd "$(dirname "$0")"
        cd "$(git rev-parse --show-toplevel)"
        sudo git clone --depth=1 --single-branch . $M
        cd "$M"
    fi
    exec $R /bin/bash $DD/test/e2e/run "$@"

else  # run locally. Assume installed vncserver, xephyr, ratpoison, scrot.
    find() {
        if type -p "$1" >/dev/null 2>&1 ; then : ; else
            usage "$1: not found"
        fi
    }
    find Xephyr
    find scrot
    find ratpoison

    cd "$(dirname "$0")"
    cd "$(git rev-parse --show-toplevel)"
fi

# At this point we're in our git archive's root directory.
set -x
test -d .git

cd src
test -f Makefile || qmake mudlet.pro
make -j$(( $(grep ^processor /proc/cpuinfo | wc -l) / 2 )) mudlet
cd ../test/e2e

test -s venv/bin/activate || python3 -mvenv venv
. venv/bin/activate
pip install -r requirements.txt
export HOME=$(pwd)/home
./test "$@"
